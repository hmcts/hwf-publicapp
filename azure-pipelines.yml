# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

name: '$(SourceBranchName)-$(Build.SourceVersion) Build-$(Build.BuildId)'

trigger:
  batch: true
  branches:
    include:
      - develop
      
pr:
  autoCancel: true
  branches:
    include:
      - develop
      - feature/*

variables:
  application.name: 'hwf-pubapp'
  azure.subscription.endpoint: 'hmcts-pet'
  manual.branch.prefix: 'develop'

jobs:
  - job: TestApplication
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:

    - task: UseRubyVersion@0
      inputs:
        versionSpec: '>= 2.5'

    - script: |
        # sudo apt-get update
        # sudo apt-get install libpq-dev
        # chmod +x ./bin/wait-for-it.sh
        gem install bundler -v 1.17.3
      displayName: 'before install'

    - script: |
        bundle install --retry=3 --jobs=4
        # RAILS_ENV=test bundle exec rake parallel:create parallel:migrate
        # RAILS_ENV=test bundle exec rake webdrivers:chromedriver:update
        # RAILS_ENV=test bundle exec rake webdrivers:geckodriver:update
      displayName: 'before script'

    - script: |
        bundle exec rubocop ----fast-fail
        bundle exec rspec --fail-fast
        bundle exec cucumber --fast-fail features/*.feature
      displayName: 'script'

  - job: BuildAndPushImage
    dependsOn: TestApplication
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    pool:
      name: hmcts-pet  # name of the pool to run this job in
    steps:
    - bash: |
        repo_sha=$(git rev-parse --verify HEAD)
        docker_image_tag_sha=${repo_sha:0:7}
        echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(Build.SourceBranchName)-${docker_image_tag_sha}"
      displayName: 'Get Docker Tag'
      name: 'getDockerTag'

    - task: Docker@1
      displayName: login
      inputs:
        azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
        azureContainerRegistry: $(azure.container.registry)
        command: login

    - task: Docker@1
      displayName: 'Build an image'
      inputs:
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
        arguments: '--build-arg APPVERSION=$(getDockerTag.DOCKER_TAG) --build-arg APP_BUILD_TAG=$(Build.SourceBranchName)-$(Build.SourceVersion) --build-arg APP_GIT_COMMIT=$(Build.SourceVersion)'

    - task: Docker@1
      displayName: 'Tag image'
      inputs:
        azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
        azureContainerRegistry: $(azure.container.registry)
        command: 'Tag image'
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
      
    - task: Docker@1
      displayName: 'Push an image'
      inputs:
        azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
        azureContainerRegistry: $(azure.container.registry)
        command: 'Push an image'
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

    - task: Docker@1
      displayName: logout
      inputs:
        command: logout



  - job: ManualBuildAndPushImage
    dependsOn: TestApplication
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Manual'))
    pool:
      name: hmcts-pet  # name of the pool to run this job in
    steps:
    - bash: |
        repo_sha=$(git rev-parse --verify HEAD)
        docker_image_tag_sha=${repo_sha:0:7}
        echo "##vso[task.setvariable variable=DOCKER_TAG;isOutput=true]$(manual.branch.prefix)-$(Build.SourceBranchName)-${docker_image_tag_sha}"
      displayName: 'Get Docker Tag'
      name: 'getDockerTag'

    - task: Docker@1
      displayName: login
      inputs:
        azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
        azureContainerRegistry: $(azure.container.registry)
        command: login

    - task: Docker@1
      displayName: 'Build an image'
      inputs:
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
        arguments: '--build-arg APPVERSION=$(getDockerTag.DOCKER_TAG) --build-arg APP_BUILD_TAG=$(Build.SourceBranchName)-$(Build.SourceVersion) --build-arg APP_GIT_COMMIT=$(Build.SourceVersion)'

    - task: Docker@1
      displayName: 'Tag image'
      inputs:
        azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
        azureContainerRegistry: $(azure.container.registry)
        command: 'Tag image'
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'
      
    - task: Docker@1
      displayName: 'Push an image'
      inputs:
        azureSubscriptionEndpoint: '$(azure.subscription.endpoint)'
        azureContainerRegistry: $(azure.container.registry)
        command: 'Push an image'
        imageName: '$(application.name):$(getDockerTag.DOCKER_TAG)'

    - task: Docker@1
      displayName: logout
      inputs:
        command: logout
